# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sensory_frame.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from pyqtgraph.Qt import QtGui

from PyQt5.QtWidgets import QApplication,QVBoxLayout
import pyqtgraph as pg
import numpy as np
import time as ti
import mpu6050
from numpy import linspace
from filterpy.kalman import KalmanFilter
import sys
sys.path.append('/home/pi/body balance seeker/plot_module/live_plot_module ')
from live_plot import LivePlot
sys.path.append('/home/pi/body balance seeker/i2c_port')
from filter import KFilter ,MeanFilter,HighPassFilter,LowPassFilter,ChangeFilter




from PyQt5 import QtCore, QtGui, QtWidgets

from Home_Frame import Ui_MainWindow


class SensoryView(object):
    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(800, 455)
        self.progressBar = QtWidgets.QProgressBar(Frame)
        self.progressBar.setGeometry(QtCore.QRect(20, 390, 600, 40))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.pushButton = QtWidgets.QPushButton(Frame)
        self.pushButton.setGeometry(QtCore.QRect(710, 390, 71, 41))
        self.pushButton.setObjectName("pushButton")
        self.displayFrame = QtWidgets.QFrame(Frame)
        self.displayFrame.setGeometry(QtCore.QRect(79, 59, 681, 251))
        self.displayFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.displayFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.displayFrame.setObjectName("displayFrame")
        self.mpu6050 = mpu6050.mpu6050(0x68, bus=0)
        win=pg.GraphicsLayoutWidget(title="Signal from serial port")
        layout = QVBoxLayout()
        self.displayFrame.setLayout(layout)

        layout.addWidget(win)
        
        # test 
        self.livePlot1=LivePlot(win=win,row=0,col=0)
        self.livePlot2=LivePlot(win=win,row=0,col=1)
        self.livePlot3=LivePlot(win=win,row=1,col=0)
        def read_sensor_data():
            accelerometer_data = list(self.mpu6050.get_accel_data().values())
            return accelerometer_data[0]
        # Function to update the plot
        
        self.kFilter=KFilter(value=read_sensor_data())
        meanFilter=MeanFilter(value=read_sensor_data(),sampleNumber=3)
        # calculate the error position         
        for i in range(0,5):
            value = read_sensor_data()
            self.kValue=self.kFilter.stimate(value)
            meanValue=meanFilter.getTheMean(self.kValue)
            ti.sleep(0.001)
        print(meanValue)
        time=10*0.001
        self.lpf=LowPassFilter(initial_value=0,alpha=0.7)
        self.cFilter=ChangeFilter(value=0,sampleNumber=5,tsv=0.1)
        self.timer = pg.QtCore.QTimer()
        self.timer.timeout.connect(self.update)
        self.timer.start(10) 


        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)
        self.pushButton.clicked.connect(self.go_to_home)




    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Sensory Test"))
        self.pushButton.setText(_translate("Frame", "Back"))

    def go_to_home(self):
        # Close the current window (Exercise_Frame) and show the main window (Home_Frame)
        main_window = self.pushButton.window()  # Access the parent window
        while main_window is not None and not isinstance(main_window, QtWidgets.QMainWindow):
            main_window = main_window.parent()
        if main_window is not None:
            home_frame = Ui_MainWindow()  # Instantiate the home frame
            # Set up the home frame in the main window
            home_frame.setupUi(main_window)
            self.timer.deleteLater()
            main_window.show()  # Show the main window
            main_window.close()
          # Close the current window
    def read_sensor_data(self):
            accelerometer_data = list(self.mpu6050.get_accel_data().values())
            return accelerometer_data[0]
    def update(self):
            value = self.read_sensor_data()
            kValue=self.kFilter.stimate(value)
            meanValue=self.lpf.apply(kValue)
            cfValue=self.cFilter.getValueCheck(meanValue)
            print(f"Lpf:{meanValue}")
            print(f"cf:{cfValue}")
            self.livePlot1.update(value)
            self.livePlot2.update(kValue)
            self.livePlot3.update(cfValue)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Frame = QtWidgets.QFrame()
    ui = SensoryView()
    ui.setupUi(Frame)
    Frame.show()
    sys.exit(app.exec_())
