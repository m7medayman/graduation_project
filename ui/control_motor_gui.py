# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'control_motor_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import threading
from PyQt5 import QtCore, QtGui, QtWidgets
import serial

from Home_Frame import Ui_MainWindow


class MotorControlUi(object):
    def setupUi(self, Frame):
    ### init variables 
        self.ser = serial.Serial('/dev/ttyACM0', 31250) 
        self.maxSpeed=2000
        self.maxAcceleration=5000
        self.speed=0
        self.acceleration=0
    ### start of ui initialization 
        Frame.setObjectName("control")
        Frame.resize(800, 450)
        self.centralwidget = QtWidgets.QWidget(Frame)
        self.centralwidget.setObjectName("centralwidget")
        self.speedSlider = QtWidgets.QSlider(self.centralwidget)
        self.speedSlider.setGeometry(QtCore.QRect(60, 250, 701, 51))
        self.speedSlider.setStyleSheet("QSlider::handle:horizontal { width: 100px; height: 80px;border: 1px solid;margin: -15px 0px; }")
        self.speedSlider.setProperty("value", 0)
        self.speedSlider.setOrientation(QtCore.Qt.Horizontal)
        self.speedSlider.setObjectName("speedSlider")
        self.accelerationSlider = QtWidgets.QSlider(self.centralwidget)
        self.accelerationSlider.setGeometry(QtCore.QRect(60, 320, 701, 41))
        self.accelerationSlider.setOrientation(QtCore.Qt.Horizontal)
        self.accelerationSlider.setObjectName("accelerationSlider")
        self.clockwise_button = QtWidgets.QPushButton(self.centralwidget)
        self.clockwise_button.setGeometry(QtCore.QRect(70, 62, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.clockwise_button.setFont(font)
        self.clockwise_button.setObjectName("clockwise_button")
        self.antiClockwiseButton = QtWidgets.QPushButton(self.centralwidget)
        self.antiClockwiseButton.setGeometry(QtCore.QRect(70, 160, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.antiClockwiseButton.setFont(font)
        self.antiClockwiseButton.setObjectName("antiClockwiseButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(280, 380, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(480, 380, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.speedVlaueText = QtWidgets.QLabel(self.centralwidget)
        self.speedVlaueText.setGeometry(QtCore.QRect(360, 380, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.speedVlaueText.setFont(font)
        self.speedVlaueText.setObjectName("speedVlaue")
        self.accelerationValueText = QtWidgets.QLabel(self.centralwidget)
        self.accelerationValueText.setGeometry(QtCore.QRect(610, 380, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.accelerationValueText.setFont(font)
        self.accelerationValueText.setObjectName("accelerationValue")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 250, 47, 13))
        self.label.setObjectName("label")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(80, 320, 81, 16))
        self.label_6.setObjectName("label_6")
        self.downButton = QtWidgets.QPushButton(self.centralwidget)
        self.downButton.setGeometry(QtCore.QRect(310, 160, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.downButton.setFont(font)
        self.downButton.setObjectName("downButton")
        self.upButton = QtWidgets.QPushButton(self.centralwidget)
        self.upButton.setGeometry(QtCore.QRect(310, 62, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.upButton.setFont(font)
        self.upButton.setObjectName("upButton")
        self.autoButton = QtWidgets.QPushButton(self.centralwidget)
        self.autoButton.setGeometry(QtCore.QRect(550, 62, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.autoButton.setFont(font)
        self.autoButton.setObjectName("autoButton")
        self.stopButton = QtWidgets.QPushButton(self.centralwidget)
        self.stopButton.setGeometry(QtCore.QRect(550, 160, 221, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.stopButton.setFont(font)
        self.stopButton.setObjectName("stopButton")
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(20, 370, 121, 51))
        self.backButton.setObjectName("backButton")
        Frame.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Frame)
        self.statusbar.setObjectName("statusbar")
        Frame.setStatusBar(self.statusbar)
        self.retranslateUi(Frame)
     ##  # ### Start serial receive thread
        # self.receive_thread = threading.Thread(target=self.serial_receive)
        # self.receive_thread.daemon = True
        # self.receive_thread.start()
        QtCore.QMetaObject.connectSlotsByName(Frame)
        ### end of ui initialization 
###########################################################################################
   
    
        ### connect function to widgets 
        self.backButton.clicked.connect(self.go_to_home)
        self.speedSlider.valueChanged.connect(self.updateSpeed)
        self.accelerationSlider.valueChanged.connect(self.updateAcceleration)
        self.upButton.clicked.connect(self.upButtonFunction)
        self.downButton.clicked.connect(self.downButtonFunction)
        self.clockwise_button.clicked.connect(self.clocwiseButtonFunction)
        self.antiClockwiseButton.clicked.connect(self.antiClocwiseButtonFunction)
        self.stopButton.clicked.connect(self.stopButtonFunction)
        self.autoButton.clicked.connect(self.autoButtonFunction)
#################################################
    def clocwiseButtonFunction(self):
        self.ser.write(f"c,{self.speed},{self.acceleration}".encode('utf-8'))
        print("clockwise button down")
    def antiClocwiseButtonFunction(self):
        self.ser.write(f"ac,{self.speed},{self.acceleration}".encode('utf-8'))
        print("anti clockwise button down")
    def upButtonFunction(self):
        self.ser.write(f"u,{self.speed},{self.acceleration}".encode('utf-8'))
        print("up button down")
    def downButtonFunction(self):
        self.ser.write(f"d,{self.speed},{self.acceleration}".encode('utf-8'))
        print("down button down")
    def autoButtonFunction(self):
        self.ser.write(f"auto,{self.speed},{self.acceleration}".encode('utf-8'))
        print("auto button down")
    def stopButtonFunction(self):
        self.ser.write(f"st,{self.speed},{self.acceleration}".encode('utf-8'))
        print("stop button down")
    # def serial_receive(self):
    #     while True:
    #         if self.ser.in_waiting:
    #             received_data = self.ser.readline().decode().strip()
    def updateSpeed(self,speedValue):
        self.speed=int(speedValue*self.maxSpeed/100)
        self.speedVlaueText.setText(f"{self.speed}")

    def updateAcceleration(self,accelerationValue):
        self.acceleration=int(accelerationValue*self.maxAcceleration/100)
        self.accelerationValueText.setText(f"{self.acceleration}")

    def go_to_home(self):
        # Close the current window (Exercise_Frame) and show the main window (Home_Frame)
        main_window = self.backButton.window()  # Access the parent window
        while main_window is not None and not isinstance(main_window, QtWidgets.QMainWindow):
            main_window = main_window.parent()
        if main_window is not None:
            home_frame = Ui_MainWindow()  # Instantiate the home frame
            # Set up the home frame in the main window
            home_frame.setupUi(main_window)
            main_window.show()  # Show the main window
            main_window.close()
          # Close the current window

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.clockwise_button.setText(_translate("MainWindow", "clockwise "))
        self.antiClockwiseButton.setText(_translate("MainWindow", "anticlockwise"))
        self.label_2.setText(_translate("MainWindow", "speed : "))
        self.label_3.setText(_translate("MainWindow", "acceleration: "))
        self.speedVlaueText.setText(_translate("MainWindow", f"{self.speed}"))
        self.accelerationValueText.setText(_translate("MainWindow", f"{self.acceleration}"))
        self.label.setText(_translate("MainWindow", "speed"))
        self.label_6.setText(_translate("MainWindow", "acceleration"))
        self.downButton.setText(_translate("MainWindow", "down"))
        self.upButton.setText(_translate("MainWindow", "up"))
        self.autoButton.setText(_translate("MainWindow", "auto"))
        self.stopButton.setText(_translate("MainWindow", "stop"))
        self.backButton.setText(_translate("MainWindow", "back"))
